from transformers import pipeline
import torch
import os

model_name = "meta-llama/Llama-3.1-8B-Instruct"
pipe = pipeline(
    "text-generation", 
    model=model_name, 
    model_kwargs={"torch_dtype": torch.bfloat16}, 
    device_map="auto"
)

def generate_response(pipe, content):
    messages = [
        {
          "role": "system",
          "content": "You are an expert translator specializing in English-to-Vietnamese translation. When tasked with providing translations, refinements, or proofreading, respond only with the translation itself. Do not include any additional information, explanations, or headings in your response."
        },
        {"role": "user", "content": content},
    ]
    outputs = pipe(
        messages,
        max_new_tokens = 1024
    )
    return outputs[0]["generated_text"][-1]['content']

def multi_turn(pipe, content):
    # Initialize conversation history
    conversation_history = f"""
    User:
    You will be asked to translate a piece of text from English into Vietnamese following the four stages of the translation process. Here is the context in which the text appears:
    Context: {content}
    To start, let's do some pre-drafting research on the above context:
    Research:
    During this phase, thorough research is essential to address components of the context text that pose translation challenges. The goal is to establish a comprehensive translation plan that covers the following category: 
    - Medical Jargon: Identify any specialized medical terms or jargon in the text and ensure understanding of their precise meanings and implications in both English and Vietnamese to maintain accuracy and relevance.
    """
    research = generate_response(pipe, conversation_history)
    conversation_history += f"Assistant: {research}" + f"""
    User:
    Now, let's move on to the drafting stage.
    Draft Translation:
    In this phase, your primary objective is to create a draft translation that accurately conveys the meaning of the source text presented below. At this stage, it is crucial to focus on adequacy, ensuring that your translation closely adheres to the source text. Moreover, pay attention to the context. Your response should conclude with the draft translation. If context is missing, generate a general translation that is adaptable to various contexts. Avoid adding any additional information not present in the source text. All elements of the source text should be present in the translation.
    Give your best one translation for the following piece of text based on the pre-drafting analysis without providing alternatives:
    English: {content}
    """
    draft_translation = generate_response(pipe, conversation_history)
    conversation_history += f"Assistant: {draft_translation}" + f"""
    Now let's move to the next stage.
    Post-Editing with Local Refinement:
    In this stage, the primary aim is to refine the draft translation by making micro-level improvements that improve the draftâ€™s fluency. Focus on the following:
    - Pronouns.
    - Lexical consistency.
    - Deixis (contextual referencing).
    - Coherence and cohesion.
    Provide only one refined translation and do not output anything else after that.
    """
    refined_translation = generate_response(pipe, conversation_history)
    conversation_history += f"Assistant: {refined_translation}"
    # print(conversation_history)

    proofread_prompt = f"""
    User: 
    You are tasked with proofreading a translation that has been revised for improved fluency. The refined translation has been generated by editing the draft translation.
    Proofreading and Final Editing
    The goal is to provide a polished final translation of the source text. For your reference, below are the source text, the draft, and refined translations.
    Source Text {content}
    Draft Translation {draft_translation}
    Refined Translation {refined_translation} 
    Carefully proofread the refined translation, focusing on:
    - Grammar, spelling, and punctuation
    - Terminology and lexical consistency
    - Discourse phenomena, including pronouns, deixis, coherence, and cohesion
    - Overall fluency and readability
    Ensure the translation accurately conveys the meaning, tone, and style of the source text. Submit only the final, polished version.
    """

    return generate_response(pipe, proofread_prompt)
    

# Function to process a single file
def process_file(file_path, pipeline):
    with open(file_path, "r", encoding="utf-8") as file:
        content = file.readlines()
    response = multi_turn(pipeline, "".join(content))
    return response

# Function to process all .txt files in a folder
def process_folder(source_folder_path, target_folder_path, pipeline):
    for file_name in os.listdir(source_folder_path):
        if file_name.endswith(".txt"):
            file_path = os.path.join(source_folder_path, file_name)
            print(f"Processing file: {file_name}")
            try:
                translation = process_file(file_path, pipeline)
                output_file = os.path.join(target_folder_path, f"translated_{file_name}")
                with open(output_file, "w", encoding="utf-8") as out_file:
                    out_file.write(translation)
                print(f"Saved translation to {output_file}")
            except Exception as e:
                print(f"Error processing {file_name}: {e}")

source_folder_path = ""
target_folder_path = ""
process_folder(source_folder_path, target_folder_path, pipe)
